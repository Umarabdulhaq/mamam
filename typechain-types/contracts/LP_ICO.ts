/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace LP_ICO {
  export type PoolStruct = {
    name: PromiseOrValue<string>;
    poolCreator: PromiseOrValue<string>;
    startAuctionAt: PromiseOrValue<BigNumberish>;
    endAuctionAt: PromiseOrValue<BigNumberish>;
    claimAuctionFundsAt: PromiseOrValue<BigNumberish>;
    enableWhiteList: PromiseOrValue<boolean>;
    maxAmountPerWallet: PromiseOrValue<BigNumberish>;
    onlyZksHolders: PromiseOrValue<boolean>;
    sellToken: PromiseOrValue<string>;
    amountOfSellToken: PromiseOrValue<BigNumberish>;
    swapRatio: PromiseOrValue<BigNumberish>;
    isUSDC: PromiseOrValue<boolean>;
  };

  export type PoolStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    name: string;
    poolCreator: string;
    startAuctionAt: BigNumber;
    endAuctionAt: BigNumber;
    claimAuctionFundsAt: BigNumber;
    enableWhiteList: boolean;
    maxAmountPerWallet: BigNumber;
    onlyZksHolders: boolean;
    sellToken: string;
    amountOfSellToken: BigNumber;
    swapRatio: BigNumber;
    isUSDC: boolean;
  };
}

export interface LP_ICOInterface extends utils.Interface {
  functions: {
    "_config()": FunctionFragment;
    "calculateFee(uint256,uint256,uint256)": FunctionFragment;
    "create((string,address,uint256,uint256,uint256,bool,uint256,bool,address,uint256,uint256,bool),address[])": FunctionFragment;
    "ehterStakedByUsers(uint256,address)": FunctionFragment;
    "ethCollectedForPoolOwner(address)": FunctionFragment;
    "getAllPools()": FunctionFragment;
    "getPoolByIndex(uint256)": FunctionFragment;
    "getTransactionFee()": FunctionFragment;
    "getZksAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolBalances(uint256)": FunctionFragment;
    "poolOwners(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellTokenCollected(uint256)": FunctionFragment;
    "sendFundsToPoolCreator(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTransactionFee(uint256)": FunctionFragment;
    "updateWhiteList(address[])": FunctionFragment;
    "updateZksAddress(address)": FunctionFragment;
    "updateZksHubWalletAddress(address)": FunctionFragment;
    "updateZksTokenMinHolding(uint256)": FunctionFragment;
    "updateZksTransactionFee(uint256)": FunctionFragment;
    "userWithDrawFunction(uint256)": FunctionFragment;
    "whiteLists(uint256,uint256)": FunctionFragment;
    "withdrawUnSoldTokens(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_config"
      | "calculateFee"
      | "create"
      | "ehterStakedByUsers"
      | "ethCollectedForPoolOwner"
      | "getAllPools"
      | "getPoolByIndex"
      | "getTransactionFee"
      | "getZksAddress"
      | "owner"
      | "poolBalances"
      | "poolOwners"
      | "renounceOwnership"
      | "sellTokenCollected"
      | "sendFundsToPoolCreator"
      | "transferOwnership"
      | "updateTransactionFee"
      | "updateWhiteList"
      | "updateZksAddress"
      | "updateZksHubWalletAddress"
      | "updateZksTokenMinHolding"
      | "updateZksTransactionFee"
      | "userWithDrawFunction"
      | "whiteLists"
      | "withdrawUnSoldTokens"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [LP_ICO.PoolStruct, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ehterStakedByUsers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ethCollectedForPoolOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getZksAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolBalances",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolOwners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenCollected",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendFundsToPoolCreator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTransactionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhiteList",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZksAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZksHubWalletAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZksTokenMinHolding",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZksTransactionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithDrawFunction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteLists",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnSoldTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "_config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ehterStakedByUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethCollectedForPoolOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZksAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendFundsToPoolCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTransactionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZksAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZksHubWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZksTokenMinHolding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZksTransactionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithDrawFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whiteLists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnSoldTokens",
    data: BytesLike
  ): Result;

  events: {
    "FeeCalculated(uint256,address,uint256)": EventFragment;
    "FundsAdded(uint256,address,tuple)": EventFragment;
    "FundsRemoved(uint256,address,tuple)": EventFragment;
    "FundsWithdrawn(uint256,address,uint256)": EventFragment;
    "LiqiudityPoolCreated(uint256,address,tuple)": EventFragment;
    "LiqiudityPoolEnded(uint256,address,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokensSwaped(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeCalculated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiqiudityPoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiqiudityPoolEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensSwaped"): EventFragment;
}

export interface FeeCalculatedEventObject {
  index: BigNumber;
  sender: string;
  amount: BigNumber;
}
export type FeeCalculatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  FeeCalculatedEventObject
>;

export type FeeCalculatedEventFilter = TypedEventFilter<FeeCalculatedEvent>;

export interface FundsAddedEventObject {
  index: BigNumber;
  sender: string;
  pool: LP_ICO.PoolStructOutput;
}
export type FundsAddedEvent = TypedEvent<
  [BigNumber, string, LP_ICO.PoolStructOutput],
  FundsAddedEventObject
>;

export type FundsAddedEventFilter = TypedEventFilter<FundsAddedEvent>;

export interface FundsRemovedEventObject {
  index: BigNumber;
  sender: string;
  pool: LP_ICO.PoolStructOutput;
}
export type FundsRemovedEvent = TypedEvent<
  [BigNumber, string, LP_ICO.PoolStructOutput],
  FundsRemovedEventObject
>;

export type FundsRemovedEventFilter = TypedEventFilter<FundsRemovedEvent>;

export interface FundsWithdrawnEventObject {
  index: BigNumber;
  sender: string;
  amount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface LiqiudityPoolCreatedEventObject {
  index: BigNumber;
  sender: string;
  pool: LP_ICO.PoolStructOutput;
}
export type LiqiudityPoolCreatedEvent = TypedEvent<
  [BigNumber, string, LP_ICO.PoolStructOutput],
  LiqiudityPoolCreatedEventObject
>;

export type LiqiudityPoolCreatedEventFilter =
  TypedEventFilter<LiqiudityPoolCreatedEvent>;

export interface LiqiudityPoolEndedEventObject {
  index: BigNumber;
  sender: string;
  pool: LP_ICO.PoolStructOutput;
}
export type LiqiudityPoolEndedEvent = TypedEvent<
  [BigNumber, string, LP_ICO.PoolStructOutput],
  LiqiudityPoolEndedEventObject
>;

export type LiqiudityPoolEndedEventFilter =
  TypedEventFilter<LiqiudityPoolEndedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokensSwapedEventObject {
  index: BigNumber;
  sender: string;
  price: BigNumber;
}
export type TokensSwapedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  TokensSwapedEventObject
>;

export type TokensSwapedEventFilter = TypedEventFilter<TokensSwapedEvent>;

export interface LP_ICO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LP_ICOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _config(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string] & {
        transactionFee: BigNumber;
        zksTransactionFee: BigNumber;
        zksTokenMinHolding: BigNumber;
        zksTokenAddress: string;
        zksHubWallet: string;
      }
    >;

    calculateFee(
      funds: PromiseOrValue<BigNumberish>,
      txFee: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    create(
      pool: LP_ICO.PoolStruct,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ehterStakedByUsers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ethCollectedForPoolOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllPools(
      overrides?: CallOverrides
    ): Promise<[LP_ICO.PoolStructOutput[]]>;

    getPoolByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LP_ICO.PoolStructOutput]>;

    getTransactionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getZksAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolBalances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellTokenCollected(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sendFundsToPoolCreator(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTransactionFee(
      txFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWhiteList(
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateZksAddress(
      Zks: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateZksHubWalletAddress(
      ZksHubWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateZksTokenMinHolding(
      zksHolding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateZksTransactionFee(
      txFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userWithDrawFunction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whiteLists(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawUnSoldTokens(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _config(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string] & {
      transactionFee: BigNumber;
      zksTransactionFee: BigNumber;
      zksTokenMinHolding: BigNumber;
      zksTokenAddress: string;
      zksHubWallet: string;
    }
  >;

  calculateFee(
    funds: PromiseOrValue<BigNumberish>,
    txFee: PromiseOrValue<BigNumberish>,
    div: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  create(
    pool: LP_ICO.PoolStruct,
    whiteList: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ehterStakedByUsers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ethCollectedForPoolOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllPools(overrides?: CallOverrides): Promise<LP_ICO.PoolStructOutput[]>;

  getPoolByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LP_ICO.PoolStructOutput>;

  getTransactionFee(overrides?: CallOverrides): Promise<BigNumber>;

  getZksAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolBalances(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolOwners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellTokenCollected(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sendFundsToPoolCreator(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTransactionFee(
    txFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWhiteList(
    whitelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateZksAddress(
    Zks: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateZksHubWalletAddress(
    ZksHubWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateZksTokenMinHolding(
    zksHolding: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateZksTransactionFee(
    txFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userWithDrawFunction(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whiteLists(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawUnSoldTokens(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _config(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string] & {
        transactionFee: BigNumber;
        zksTransactionFee: BigNumber;
        zksTokenMinHolding: BigNumber;
        zksTokenAddress: string;
        zksHubWallet: string;
      }
    >;

    calculateFee(
      funds: PromiseOrValue<BigNumberish>,
      txFee: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      pool: LP_ICO.PoolStruct,
      whiteList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    ehterStakedByUsers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethCollectedForPoolOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPools(overrides?: CallOverrides): Promise<LP_ICO.PoolStructOutput[]>;

    getPoolByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LP_ICO.PoolStructOutput>;

    getTransactionFee(overrides?: CallOverrides): Promise<BigNumber>;

    getZksAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolBalances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellTokenCollected(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendFundsToPoolCreator(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTransactionFee(
      txFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhiteList(
      whitelist: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateZksAddress(
      Zks: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateZksHubWalletAddress(
      ZksHubWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateZksTokenMinHolding(
      zksHolding: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateZksTransactionFee(
      txFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userWithDrawFunction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteLists(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawUnSoldTokens(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeCalculated(uint256,address,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FeeCalculatedEventFilter;
    FeeCalculated(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FeeCalculatedEventFilter;

    "FundsAdded(uint256,address,tuple)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      pool?: null
    ): FundsAddedEventFilter;
    FundsAdded(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      pool?: null
    ): FundsAddedEventFilter;

    "FundsRemoved(uint256,address,tuple)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      pool?: null
    ): FundsRemovedEventFilter;
    FundsRemoved(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      pool?: null
    ): FundsRemovedEventFilter;

    "FundsWithdrawn(uint256,address,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FundsWithdrawnEventFilter;

    "LiqiudityPoolCreated(uint256,address,tuple)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      pool?: null
    ): LiqiudityPoolCreatedEventFilter;
    LiqiudityPoolCreated(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      pool?: null
    ): LiqiudityPoolCreatedEventFilter;

    "LiqiudityPoolEnded(uint256,address,tuple)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      pool?: null
    ): LiqiudityPoolEndedEventFilter;
    LiqiudityPoolEnded(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      pool?: null
    ): LiqiudityPoolEndedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TokensSwaped(uint256,address,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null
    ): TokensSwapedEventFilter;
    TokensSwaped(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null
    ): TokensSwapedEventFilter;
  };

  estimateGas: {
    _config(overrides?: CallOverrides): Promise<BigNumber>;

    calculateFee(
      funds: PromiseOrValue<BigNumberish>,
      txFee: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      pool: LP_ICO.PoolStruct,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ehterStakedByUsers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethCollectedForPoolOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPools(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionFee(overrides?: CallOverrides): Promise<BigNumber>;

    getZksAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolBalances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellTokenCollected(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendFundsToPoolCreator(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTransactionFee(
      txFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWhiteList(
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateZksAddress(
      Zks: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateZksHubWalletAddress(
      ZksHubWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateZksTokenMinHolding(
      zksHolding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateZksTransactionFee(
      txFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userWithDrawFunction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whiteLists(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawUnSoldTokens(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateFee(
      funds: PromiseOrValue<BigNumberish>,
      txFee: PromiseOrValue<BigNumberish>,
      div: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      pool: LP_ICO.PoolStruct,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ehterStakedByUsers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethCollectedForPoolOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getZksAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolBalances(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenCollected(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendFundsToPoolCreator(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTransactionFee(
      txFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWhiteList(
      whitelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateZksAddress(
      Zks: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateZksHubWalletAddress(
      ZksHubWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateZksTokenMinHolding(
      zksHolding: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateZksTransactionFee(
      txFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userWithDrawFunction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whiteLists(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawUnSoldTokens(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
